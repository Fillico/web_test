{"name": "test_invest_success", "uuid": "5b1b0cbd-e51f-4b60-9e5a-8a1c7b31e714", "fullName": "TestCases.test_invest_pytest.TestInvestPage#test_invest_success", "historyId": "2bdfafd25e10c6f6a1d46eaaf1818663", "status": "broken", "stop": 1561894547709, "statusDetails": {"trace": "self = <TestCases.test_invest_pytest.TestInvestPage object at 0x000000D80C3AE6A0>\nlogin_web = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e84bff97c766d8742dee1d755746d139\")>\n\n    @pytest.mark.smoke\n    def test_invest_success(self,login_web):\n        logging.info(\"======投资用例：正常场景-投资成功\")\n        before_invest = BidPage(login_web).get_user_left_money()\n        BidPage(login_web).invest(ID.invest_success_data[\"invest_money\"])\n>       BidPage(login_web).click_activeButton_on_success_popup()  # 点击查看并激活按钮\n\nTestCases\\test_invest_pytest.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObject\\bid_page.py:35: in click_activeButton_on_success_popup\n    self.click_element(loc.bid_success_look_btn, \"标页面_投资成功提示框_点击查看并激活\")\nCommon\\basepage.py:56: in click_element\n    self.wait_eleVisible(loc, img_doc, timeout, frequency)\nCommon\\basepage.py:31: in wait_eleVisible\n    WebDriverWait(self.driver, timeout, frequency).until(EC.visibility_of_element_located(loc))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e84bff97c766d8742dee1d755746d139\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x000000D80C3AEDA0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nd:\\_0_0_lyx_ceshi\\python35\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException", "message": "selenium.common.exceptions.TimeoutException: Message:"}, "attachments": [{"name": "log", "type": "text/plain", "source": "5772d4c6-ebf4-4a5a-ba1b-581a8fc40c86-attachment.txt"}], "start": 1561894515549, "labels": [{"name": "tag", "value": "invest"}, {"name": "tag", "value": "smoke"}, {"name": "subSuite", "value": "TestInvestPage"}, {"name": "suite", "value": "test_invest_pytest"}, {"name": "parentSuite", "value": "TestCases"}, {"name": "host", "value": "G50-75M"}, {"name": "thread", "value": "13544-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_invest_pytest"}]}